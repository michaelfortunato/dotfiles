#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "pynvim",
# ]
# ///
import pynvim
import pty
import os
import sys
import select


def repl(nvim):
    prompt = "nvim-repl> "
    sys.stdout.write(prompt)
    sys.stdout.flush()

    for line in sys.stdin:
        line = line.strip()
        if line == "exit":
            print("Exiting REPL.")
            break
        if line == "" or line is None:
            sys.stdout.write(prompt)
            sys.stdout.flush()
            continue
        result = ""
        try:
            result = nvim.exec_lua(f"return {line}") or ""
        except pynvim.NvimError:
            try:
                result = nvim.exec_lua(line)
            except pynvim.NvimError as e:
                result = f"Error: {e}"
        sys.stdout.write(str(result))
        sys.stdout.write("\n")
        sys.stdout.write(prompt)
        sys.stdout.flush()


if __name__ == "__main__":
    NVIM_ADDR = len(sys.argv) > 1 and sys.argv[1] or os.environ.get("NVIM")
    assert NVIM_ADDR is not None, (
        "Must supply nvim server address on CLI or have it the $NVIM"
    )
    pid, fd = pty.fork()

    if pid != 0:
        nvim = pynvim.attach("socket", path=NVIM_ADDR)
        repl(nvim)
        os._exit(0)
    else:
        try:
            while True:
                rlist, _, _ = select.select([fd, sys.stdin.fileno()], [], [])

                if fd in rlist:
                    data = os.read(fd, 1024)
                    if not data:
                        break
                    os.write(sys.stdout.fileno(), data)

                if sys.stdin.fileno() in rlist:
                    data = os.read(sys.stdin.fileno(), 1024)
                    if not data:
                        break
                    os.write(fd, data)
        except OSError:
            pass
