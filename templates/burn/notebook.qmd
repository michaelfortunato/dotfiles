

```{rust}
:clear
:dep burn = {version = "*", features = ["wgpu"]}

use burn::backend::wgpu::WgpuDevice;
use burn::backend::Wgpu;
use burn::tensor::{Tensor, Float, Int};
use burn::tensor::Distribution;;
//let device: &'static WgpuDevice = Box::leak(Box::new(WgpuDevice::default()));
```


```{rust}
fn foo() {
  let x = 4;
  let y = &x;
  println!("{x}");
  println!("{x}");
}
foo();
```

```{rust}
type FloatTensor<const D: usize> = Tensor<Wgpu, D, Float>;
type IntTensor<const D: usize> = Tensor<Wgpu, D, Int>;
```

```{rust}
fn foo() -> (FloatTensor<2>, FloatTensor<2>, IntTensor<1>) {
  // NOTE: The box leak dance is an excvr (understandable) limitation, 
  // and giving it a static lifetime will allow us to refernce the device
  // at the top scope. 
  // https://github.com/evcxr/evcxr/blob/main/COMMON.md#references
  let device = WgpuDevice::default();
  // NOTE: Rust for some reason required me annotating the variable `w`. 
  // Ie this did not work:
  // `let w = FloatTensor::<2>::random([10, 2], Distribution::Normal(0.0, 3.0), &device);`
  let w: FloatTensor<2> = FloatTensor::<2>::random([10, 2], Distribution::Normal(0.0, 3.0), &device);
  let index: IntTensor<1> = IntTensor::<1>::arange(0..4, &device);
  let w_sub: FloatTensor<2> = w.clone().select(0, index.clone());
  (w, w_sub, index)
}
```


```{rust}
fn uhhhh() -> FloatTensor<2> {
  // NOTE: The box leak dance is an excvr (understandable) limitation, 
  // and giving it a static lifetime will allow us to refernce the device
  // at the top scope. 
  // https://github.com/evcxr/evcxr/blob/main/COMMON.md#references
  let device = WgpuDevice::default();
  println!("{device:?}");
  // NOTE: Rust for some reason required me annotating the variable `w`. 
  // Ie this did not work:
  // `let w = FloatTensor::<2>::random([10, 2], Distribution::Normal(0.0, 3.0), &device);`
  let w: FloatTensor<2> = FloatTensor::<2>::random([10, 2], Distribution::Normal(0.0, 3.0), &device);
  let index: IntTensor<1> = IntTensor::<1>::arange(0..4, &device);
  let w_sub: FloatTensor<2> = w.clone().select(0, index.clone());
  println!("{w_sub}");
  w
}
```

```{rust}
let x: (FloatTensor<2>, FloatTensor<2>, IntTensor<1>) = foo();
println!("w_sub: {}", x.1);
```

```{rust}
```






























